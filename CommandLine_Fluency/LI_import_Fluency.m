
function fmri_for_all_subjects  

%     PatientFolder = 'D:\kirsten_thesis\data\patients\';
    ControlsFolder = 'D:\kirsten_thesis\data\controls\';
    
%     fmriSelectSubjects (PatientFolder)
    fmriSelectSubjects (ControlsFolder)
    
end


function fmriSelectSubjects (Mainfolder)

List = dir( Mainfolder );
LI_all = [];
 
for i = 1:size(List)
    if ( 0 == strcmp( List(i,1).name, '.') && 0 == strcmp( List(i,1).name, '..') )
        SubjectPath = strcat(Mainfolder, List(i,1).name) ;
        SubjectName = List(i,1).name
        
       
        [Path] = MakePath(SubjectPath, SubjectName)
        [Inputimage,Inclusivemask,Exclusivemask,Threshold,LI,Method,VCVV,VarianceWeighting,Clustering,Sourcepath,Voxelsright,Voxelsleft,Clustersright,Clustersleft] = importfile(strcat(Path.Statistics.Fluency, filesep, 'LI_Wernicke_p_001.txt'),2, 2);
        [LI_all]=kh_collect_LI (LI_all, LI, Voxelsleft, Voxelsright, i)
    end
    
end

LI_all.LI=LI_all.LI'
LI_all.Voxelsleft=LI_all.Voxelsleft';
LI_all.Voxelsright=LI_all.Voxelsright';
LI_all

end


function [LI_all]= kh_collect_LI (LI_all, LI, Voxelsleft, Voxelsright, i)
%
LI_all.LI(i-2)=LI;
LI_all.Voxelsleft(i-2)=Voxelsleft;
LI_all.Voxelsright(i-2)=Voxelsright;

end


function [Inputimage,Inclusivemask,Exclusivemask,Threshold,LI,Method,VCVV,VarianceWeighting,Clustering,Sourcepath,Voxelsright,Voxelsleft,Clustersright,Clustersleft] = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [INPUTIMAGE,INCLUSIVEMASK,EXCLUSIVEMASK,THRESHOLD,LI,METHOD,VCVV,VARIANCEWEIGHTING,CLUSTERING,SOURCEPATH,VOXELSRIGHT,VOXELSLEFT,CLUSTERSRIGHT,CLUSTERSLEFT]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [INPUTIMAGE,INCLUSIVEMASK,EXCLUSIVEMASK,THRESHOLD,LI,METHOD,VCVV,VARIANCEWEIGHTING,CLUSTERING,SOURCEPATH,VOXELSRIGHT,VOXELSLEFT,CLUSTERSRIGHT,CLUSTERSLEFT]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Inputimage,Inclusivemask,Exclusivemask,Threshold,LI,Method,VCVV,VarianceWeighting,Clustering,Sourcepath,Voxelsright,Voxelsleft,Clustersright,Clustersleft]
%   = importfile('LI_Broca_p_01.txt',2, 2);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/05/12 09:29:55

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,11,12,13,14]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,11,12,13,14]);
rawCellColumns = raw(:, [6,7,8,9,10]);


%% Allocate imported array to column variable names
Inputimage = cell2mat(rawNumericColumns(:, 1));
Inclusivemask = cell2mat(rawNumericColumns(:, 2));
Exclusivemask = cell2mat(rawNumericColumns(:, 3));
Threshold = cell2mat(rawNumericColumns(:, 4));
LI = cell2mat(rawNumericColumns(:, 5));
Method = rawCellColumns(:, 1);
VCVV = rawCellColumns(:, 2);
VarianceWeighting = rawCellColumns(:, 3);
Clustering = rawCellColumns(:, 4);
Sourcepath = rawCellColumns(:, 5);
Voxelsright = cell2mat(rawNumericColumns(:, 6));
Voxelsleft = cell2mat(rawNumericColumns(:, 7));
Clustersright = cell2mat(rawNumericColumns(:, 8));
Clustersleft = cell2mat(rawNumericColumns(:, 9));

end


function [Inputimage,Inclusivemask,Exclusivemask,Threshold,LI,Method,VCVV,VarianceWeighting,Clustering,Sourcepath,Voxelsright,Voxelsleft,Clustersright,Clustersleft] = importfile2(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [INPUTIMAGE,INCLUSIVEMASK,EXCLUSIVEMASK,THRESHOLD,LI,METHOD,VCVV,VARIANCEWEIGHTING,CLUSTERING,SOURCEPATH,VOXELSRIGHT,VOXELSLEFT,CLUSTERSRIGHT,CLUSTERSLEFT]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [INPUTIMAGE,INCLUSIVEMASK,EXCLUSIVEMASK,THRESHOLD,LI,METHOD,VCVV,VARIANCEWEIGHTING,CLUSTERING,SOURCEPATH,VOXELSRIGHT,VOXELSLEFT,CLUSTERSRIGHT,CLUSTERSLEFT]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Inputimage,Inclusivemask,Exclusivemask,Threshold,LI,Method,VCVV,VarianceWeighting,Clustering,Sourcepath,Voxelsright,Voxelsleft,Clustersright,Clustersleft]
%   = importfile('LI_Broca_p_01.txt',2, 2);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/05/10 14:23:19

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,11,12,13,14]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,11,12,13,14]);
rawCellColumns = raw(:, [6,7,8,9,10]);


%% Allocate imported array to column variable names
Inputimage = cell2mat(rawNumericColumns(:, 1));
Inclusivemask = cell2mat(rawNumericColumns(:, 2));
Exclusivemask = cell2mat(rawNumericColumns(:, 3));
Threshold = cell2mat(rawNumericColumns(:, 4));
LI = cell2mat(rawNumericColumns(:, 5));
Method = rawCellColumns(:, 1);
VCVV = rawCellColumns(:, 2);
VarianceWeighting = rawCellColumns(:, 3);
Clustering = rawCellColumns(:, 4);
Sourcepath = rawCellColumns(:, 5);
Voxelsright = cell2mat(rawNumericColumns(:, 6));
Voxelsleft = cell2mat(rawNumericColumns(:, 7));
Clustersright = cell2mat(rawNumericColumns(:, 8));
Clustersleft = cell2mat(rawNumericColumns(:, 9));

end


function [Path] = MakePath(SubjectPath, SubjectName)
    
            Path.Subject = SubjectPath ;
            Path.RawData = strcat(SubjectPath, filesep, 'fMRI\', 'RawData');
            Path.Nifti.Fluency = strcat (SubjectPath, '\', 'fMRI\nifti\Fluency') ;
            Path.Nifti.VG = strcat (SubjectPath, filesep, 'fMRI\nifti\Verbgeneration') ;
            Path.Statistics.VG = strcat(SubjectPath, filesep, 'fMRI\statistics\Verbgeneration') ;
            Path.Statistics.Fluency = strcat(SubjectPath, filesep, 'fMRI\statistics\Fluency') ;
 end




